import streamlit as st
import pandas as pd
import altair as alt

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Dashboard
st.set_page_config(page_title="‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏£‡∏≤‡∏©‡∏µ‡πÑ‡∏®‡∏•", page_icon="üìä", layout="wide")

st.title("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏£‡∏≤‡∏©‡∏µ")

# ‚úÖ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
uploaded_files = st.file_uploader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)", type=["csv"], accept_multiple_files=True)

if uploaded_files:
    for file in uploaded_files:
        # **‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå**
        df = pd.read_csv(file)

        if df.empty:
            st.error(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå **{file.name}** ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")
            continue

        st.write(f"‚úÖ **‡πÑ‡∏ü‡∏•‡πå: {file.name}**")
        st.write(df.head())

        # **‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå X ‡πÅ‡∏•‡∏∞ Y ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå**
        columns = df.columns.tolist()

        x_axis = st.selectbox(f"üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô X ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file.name}", columns, key=f"x_{file.name}")
        y_axis = st.selectbox(f"üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file.name}", columns, key=f"y_{file.name}")

        # ‚úÖ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        chart_title = st.text_input(f"üìù ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå {file.name}", f"‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≠‡∏á {file.name}")

        # ‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        sort_order = st.checkbox(f"üîΩ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ ({file.name})", value=True, key=f"sort_{file.name}")

        if not x_axis or not y_axis:
            st.error(f"‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå X ‡πÅ‡∏•‡∏∞ Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file.name}")
        else:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡∏ô Y ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            if not pd.api.types.is_numeric_dtype(df[y_axis]):
                st.error(f"‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {y_axis} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! (‡πÑ‡∏ü‡∏•‡πå {file.name})")
            else:
                # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏Å‡∏ô Y (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á)
                if sort_order:
                    df = df.sort_values(by=y_axis, ascending=False)

                st.write(f"### {chart_title}")  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å input

                option = st.selectbox(f"üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü ({file.name})", ["‡πÅ‡∏ó‡πà‡∏á (Bar Chart)", "‡πÄ‡∏™‡πâ‡∏ô (Line Chart)", "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (Scatter Plot)"], key=f"chart_{file.name}")

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                x_type = 'ordinal' if df[x_axis].dtype == object else 'quantitative'

                if option == "‡πÅ‡∏ó‡πà‡∏á (Bar Chart)":
                    bars = alt.Chart(df).mark_bar().encode(
                        x=alt.X(x_axis, type=x_type, sort=df[x_axis].tolist()),  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á X ‡∏ï‡∏≤‡∏° DataFrame
                        y=alt.Y(y_axis, type='quantitative')
                    ).properties(title=chart_title, width=800, height=400)

                    text = alt.Chart(df).mark_text(
                        align='center',
                        baseline='bottom',
                        dy=-5,
                        fontSize=12,
                        color='black'
                    ).encode(
                        x=alt.X(x_axis, type=x_type, sort=df[x_axis].tolist()),
                        y=alt.Y(y_axis, type='quantitative'),
                        text=y_axis
                    )

                    st.altair_chart(bars + text, use_container_width=True)

                elif option == "‡πÄ‡∏™‡πâ‡∏ô (Line Chart)":
                    chart = alt.Chart(df).mark_line().encode(
                        x=alt.X(x_axis, type=x_type, sort=df[x_axis].tolist()),
                        y=alt.Y(y_axis, type='quantitative')
                    ).properties(title=chart_title, width=800, height=400)
                    st.altair_chart(chart, use_container_width=True)

                else:  # ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (Scatter Plot)
                    chart = alt.Chart(df).mark_circle().encode(
                        x=alt.X(x_axis, type=x_type, sort=df[x_axis].tolist()),
                        y=alt.Y(y_axis, type='quantitative')
                    ).properties(title=chart_title, width=800, height=400)
                    st.altair_chart(chart, use_container_width=True)


